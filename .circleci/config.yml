version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli


commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:

  install-back-deps:
    executor: node
    steps:
      - checkout
      - run:
        name: npm install
        working_directory: ./backend
        command: ls -la && npm install
      - persist_to_workspace:
          root: .
          path:
            - backend/node_modules

  install-front-deps:
    executor: node
    steps:
      - checkout
      - run:
        name: npm install
        working_directory: ./frontend
        command: ls -la && npm install
      - persist_to_workspace:
          root: .
          path:
            - frontend/node_modules

  build-frontend:
    executor:  node
    steps:
      - checkout
      - restore_cache:
        keys: [frontend-build]
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
            echo "building backend üö©"
            npm run build
      - save_cache:
        paths: [frontend/node_modules]
        key: frontend-build

  build-backend:
    executor:  node
    steps:
      - checkout
      - restore_cache:
        keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            echo "building backend üö©"
            npm run build
          working_directory: ./backend
      - save_cache:
        paths: [backend/node_modules]
        key: backend-build

  test-frontend:
    executor:  node
    steps:
      # - checkout
      # - attach_workspace:
      #     at: .
      # - restore_cache:
      #   keys: [frontend-build]
      # - run:
      #     name: junit coverage reporter installation
      #     working_directory: ./frontend
      #     command: |
      #       echo "junit coverage reporter installation üî•"
      #       npm install --save-dev jest-junit
      # - run:
      #     name: run tests with JUnit coverage reporter
      #     working_directory: ./frontend
      #     command: |
      #       echo "running tests with JUnit coverage reporter üèÅ"
      #       npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd && ls -la /tmp
      #     environment:
      #       JEST_JUNIT_OUTPUT_DIR: ./test_results
      # - store_test_results:
      #     path: ./frontend/test_results
      # - store_artifacts:
      #     path: ./frontend/test_results

  test-backend:
    executor: node
    steps:
      # - checkout
      # - attach_workspace:
      #     at: .
      # - restore_cache:
      #   keys: [frontend-build]
      # - run:
      #     name: junit coverage reporter installation
      #     working_directory: ./backend
      #     command: |
      #       echo "junit coverage reporter installation üî•"
      #       npm install --save-dev jest-junit
      # - run:
      #     name: Run tests with JUnit coverage reporter
      #     working_directory: ./backend
      #     command: |
      #       echo "running tests with JUnit coverage reporter üèÅ"
      #       npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd
      #     environment:
      #       JEST_JUNIT_OUTPUT_DIR: ./test_results
      # - store_test_results:
      #     path: ./backend/test_results
      # - store_artifacts:
      #     path: ./backend/test_results
            
  scan-frontend:
    executor: node
    steps:
      # - checkout
      # - attach_workspace:
      #     at: .
      # - run:
      #     name: Checking Frontend against security vulnerabilities
      #     working_directory: ./frontend
      #     command: |
      #       echo "checking frontend against security vulnerabilities üîç"
      #       npm audit --audit-level=critical

  scan-backend:
    executor: node
    steps:
      # - checkout
      # - attach_workspace:
      #     at: .
      # - run:
      #     name: Checking Backend against security vulnerabilities
      #     working_directory: ./backend
      #     command: |
      #       echo "checking backend against security vulnerabilities üîç"
      #       npm audit --audit-level=critical

  deploy-infrastructure:
    executor: aws
    branches:
      only:
        - master
    steps:
      # - checkout
      # - run:
      #     name: Install dependencies
      #     command: yum install -y tar gzip
      # - run:
      #     name: Deploy back-end infrastructure
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/backend.yml \
      #         #--tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
      #         # --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         # --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      # - run:
      #     name: Ensure front-end infrastructure exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         #--tags project=your-tag \
      #         # --stack-name "your front-end stack name with workflow id" \
      #         # --parameter-overrides ID="your workflow id"  
      #         exit 1
      # - run:
      #     name: Add back-end ip to ansible inventory
      #     command: |
      #       # Your code here
      #       exit 1
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # Your code here
            exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            exit 1
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
    steps:
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      # Lightweight Docker image 
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      # install npm packages 
      - install-front-deps
      - install-back-deps

      - build-frontend:
          requires:
            - install-front-deps
      - build-backend:
          requires:
            - install-back-deps
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend, configure-infrastructure]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]