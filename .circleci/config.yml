version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli


# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       when:
#         type: string
#       id:
#         type: string
#     steps:
#       - run:
#           name: Destroy udapeople stack - << parameters.id >>
#           command: |
#             echo "Destroy udapeople backend stack - << parameters.id >>"
#             aws s3 rm s3://udapeople-<< parameter.id >>  --recursive 
#             aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
#             aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
#           when: << parameters.when >>


#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       when:
#         type: string
#       id:
#         type: string  
#     steps:
#       - run:
#           name: Revert migrations
#           working_directory: ./backend
#           command: |
#             SUCCESS=$(curl --insecure https://kvdb.io/LvyGiGVCy2LYFgKRHNz5NQ/accessKey -d 'mykey<< parameters.id >>')
#             echo $SUCCESS
#             if [[ "$SUCCESS" == "success" ]]
#             then
#               pwd
#               ls -la
#               npm run migrations:revert
#             fi
#           when: << parameters.when >>
            
jobs:

  install-back-deps:
    executor: node
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules
      - save_cache:
        key: build-back
        paths:
          - backend/node_modules

  install-front-deps:
    executor: node
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules
      - save_cache:
          key: build-front
          paths:
            - frontend/node_modules

  build-frontend:
    executor:  node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build front-end
          command: |
            echo "building backend 🚩"
            cd ./frontend
            ls -la
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist

  build-backend:
    executor:  node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Back-end build
          command: |
            echo "building backend 🚩"
            cd ./backend
            ls -la
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist

  test-frontend:
    executor:  node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys: 
            - build-front
      - run:
          name: junit coverage reporter installation
          working_directory: ./frontend
          command: |
            echo "junit coverage reporter installation 🔥"
            npm install --save-dev jest-junit
      - run:
          name: run tests with JUnit coverage reporter
          working_directory: ./frontend
          command: |
            echo "running tests with JUnit coverage reporter 🏁"
            npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd && ls -la /tmp
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./frontend/test_results
      - store_artifacts:
          path: ./frontend/test_results

  test-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
        keys: 
          - build-back
      - run:
          name: junit coverage reporter installation
          working_directory: ./backend
          command: |
            echo "junit coverage reporter installation 🔥"
            npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit coverage reporter
          working_directory: ./backend
          command: |
            echo "running tests with JUnit coverage reporter 🏁"
            npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./backend/test_results
      - store_artifacts:
          path: ./backend/test_results
            
#   scan-frontend:
#     executor: node
#     steps:
#       - checkout
#       - restore_cache:
#         keys: [frontend-build]
#       - run:
#           name: Checking Frontend against security vulnerabilities
#           command: |
#             cd frontend
#             npm install
#             echo "checking frontend against security vulnerabilities 🔍"
#             npm audit --audit-level=critical || true

#   scan-backend:
#     executor: node
#     steps:
#       - checkout
#       - restore_cache:
#         keys: [backend-build]
#       - run:
#           name: Checking Backend against security vulnerabilities
#           command: |
#             cd backend
#             npm install
#             echo "checking backend against security vulnerabilities 🔍"
#             npm audit --audit-level=critical || true

#   deploy-infrastructure:
#     executor: aws
#     branches:
#       only:
#         - master
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: yum install -y tar gzip
#       - run:
#           name: Deploy back-end infrastructure
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/backend.yml \
#               #--tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
#               # --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               # --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
#       - run:
#           name: Deploy front-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               #--tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
#               # --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               # --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
#               exit 1
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
#             aws ec2 describe-instances \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --output text >> inventory
#             cat inventory
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#           event: on_fail

#       # Here's where you will add some code to rollback on failure      

#   configure-infrastructure:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Configure server
#           command: |
#             # Your code here
#             exit 1
#       # Here's where you will add some code to rollback on failure      

#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#     steps:
#       # Checkout code from git
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Send migration results to memstash
#           command: |
#             # Your code here
#             exit 1
#      # Here's where you will add some code to rollback on failure      

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # install npm packages 
      - install-front-deps
      - install-back-deps
      - build-frontend:
          requires:
            - install-front-deps
      - build-backend:
          requires:
            - install-back-deps
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend, configure-infrastructure]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]